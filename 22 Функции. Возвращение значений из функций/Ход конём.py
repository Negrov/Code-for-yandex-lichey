"""
Вам дана строка, содержащая координату клетки на шахматном поле (например, “A2”).

Напишите функцию possible_turns(cell), которая будет по такой строке возвращать список координат (в такой же текстовой
форме) всех клеток, на которые может попасть конь с указанной клетки за один ход. Не забудьте, что за пределы шахматного
поля коню ходить нельзя.

Рекомендация:

Cделайте две вспомогательные функции, которые будут по строке делать целочисленные координаты и наоборот. Например,
клетке “A2” можно сопоставить кортеж (1,2), а кортежу (8,8) — клетку “H8”. То есть, одна функция принимает строку, а
возвращает кортеж из двух чисел. Другая функция принимает кортеж, возвращает строку.

Также полезно сделать функцию, которая по кортежу целочисленных координат сообщает, находится ли эта клетка внутри
шахматного поля или снаружи.

Проверяется только функция possible_turns. Вспомогательные функции не проверяются, но они помогут вам написать простое и
компактное решение.
"""


def t2c(f):
    a = f[:1]
    b = f[1:]
    r = int(b)
    c = 'ABCDEFGH'.find(a) + 1
    return c, r


def c2t(k):
    (c, r) = k
    return 'ABCDEFGH'[c - 1] + str(r)


def possible_turns(f):
    (c, r) = t2c(f)
    tmp = list()
    tmp.append((c + 2, r + 1))
    tmp.append((c + 2, r - 1))
    tmp.append((c - 2, r + 1))
    tmp.append((c - 2, r - 1))
    tmp.append((c + 1, r + 2))
    tmp.append((c - 1, r + 2))
    tmp.append((c + 1, r - 2))
    tmp.append((c - 1, r - 2))
    res = []
    for a, b in tmp:
        if (a > 0) & (b > 0) & (a <= 8) & (b <= 8):
            res += [c2t((a, b))]
    return sorted(res)
